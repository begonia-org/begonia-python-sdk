# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import authentication_pb2 as authentication__pb2


class AuthServiceStub(object):
    """option (.begonia.api.v1.auth_reqiured)=true;
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/begonia.org.sdk.AuthService/Login',
                request_serializer=authentication__pb2.LoginAPIRequest.SerializeToString,
                response_deserializer=authentication__pb2.LoginAPIResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/begonia.org.sdk.AuthService/Logout',
                request_serializer=authentication__pb2.LogoutAPIRequest.SerializeToString,
                response_deserializer=authentication__pb2.LogoutAPIResponse.FromString,
                )
        self.AuthSeed = channel.unary_unary(
                '/begonia.org.sdk.AuthService/AuthSeed',
                request_serializer=authentication__pb2.AuthLogAPIRequest.SerializeToString,
                response_deserializer=authentication__pb2.AuthLogAPIResponse.FromString,
                )


class AuthServiceServicer(object):
    """option (.begonia.api.v1.auth_reqiured)=true;
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthSeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=authentication__pb2.LoginAPIRequest.FromString,
                    response_serializer=authentication__pb2.LoginAPIResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=authentication__pb2.LogoutAPIRequest.FromString,
                    response_serializer=authentication__pb2.LogoutAPIResponse.SerializeToString,
            ),
            'AuthSeed': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthSeed,
                    request_deserializer=authentication__pb2.AuthLogAPIRequest.FromString,
                    response_serializer=authentication__pb2.AuthLogAPIResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'begonia.org.sdk.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """option (.begonia.api.v1.auth_reqiured)=true;
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.AuthService/Login',
            authentication__pb2.LoginAPIRequest.SerializeToString,
            authentication__pb2.LoginAPIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.AuthService/Logout',
            authentication__pb2.LogoutAPIRequest.SerializeToString,
            authentication__pb2.LogoutAPIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthSeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.AuthService/AuthSeed',
            authentication__pb2.AuthLogAPIRequest.SerializeToString,
            authentication__pb2.AuthLogAPIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
