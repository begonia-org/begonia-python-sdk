# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import tenant_pb2 as tenant__pb2


class TenantsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/Register',
                request_serializer=tenant__pb2.PostTenantRequest.SerializeToString,
                response_deserializer=tenant__pb2.Tenants.FromString,
                )
        self.Update = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/Update',
                request_serializer=tenant__pb2.PatchTenantRequest.SerializeToString,
                response_deserializer=tenant__pb2.Tenants.FromString,
                )
        self.Get = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/Get',
                request_serializer=tenant__pb2.GetTenantRequest.SerializeToString,
                response_deserializer=tenant__pb2.Tenants.FromString,
                )
        self.Delete = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/Delete',
                request_serializer=tenant__pb2.DeleteTenantRequest.SerializeToString,
                response_deserializer=tenant__pb2.DeleteTenantResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/List',
                request_serializer=tenant__pb2.ListTenantsRequest.SerializeToString,
                response_deserializer=tenant__pb2.ListTenantsResponse.FromString,
                )
        self.AddTenantBusiness = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/AddTenantBusiness',
                request_serializer=tenant__pb2.AddTenantBusinessRequest.SerializeToString,
                response_deserializer=tenant__pb2.TenantsBusiness.FromString,
                )
        self.ListTenantBusiness = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/ListTenantBusiness',
                request_serializer=tenant__pb2.ListTenantBusinessRequest.SerializeToString,
                response_deserializer=tenant__pb2.ListTenantBusinessResponse.FromString,
                )
        self.DeleteTenantBusiness = channel.unary_unary(
                '/begonia.org.sdk.TenantsService/DeleteTenantBusiness',
                request_serializer=tenant__pb2.DeleteTenantBusinessRequest.SerializeToString,
                response_deserializer=tenant__pb2.DeleteTenantBusinessResponse.FromString,
                )


class TenantsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTenantBusiness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTenantBusiness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTenantBusiness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TenantsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=tenant__pb2.PostTenantRequest.FromString,
                    response_serializer=tenant__pb2.Tenants.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=tenant__pb2.PatchTenantRequest.FromString,
                    response_serializer=tenant__pb2.Tenants.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=tenant__pb2.GetTenantRequest.FromString,
                    response_serializer=tenant__pb2.Tenants.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=tenant__pb2.DeleteTenantRequest.FromString,
                    response_serializer=tenant__pb2.DeleteTenantResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=tenant__pb2.ListTenantsRequest.FromString,
                    response_serializer=tenant__pb2.ListTenantsResponse.SerializeToString,
            ),
            'AddTenantBusiness': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTenantBusiness,
                    request_deserializer=tenant__pb2.AddTenantBusinessRequest.FromString,
                    response_serializer=tenant__pb2.TenantsBusiness.SerializeToString,
            ),
            'ListTenantBusiness': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTenantBusiness,
                    request_deserializer=tenant__pb2.ListTenantBusinessRequest.FromString,
                    response_serializer=tenant__pb2.ListTenantBusinessResponse.SerializeToString,
            ),
            'DeleteTenantBusiness': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTenantBusiness,
                    request_deserializer=tenant__pb2.DeleteTenantBusinessRequest.FromString,
                    response_serializer=tenant__pb2.DeleteTenantBusinessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'begonia.org.sdk.TenantsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TenantsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/Register',
            tenant__pb2.PostTenantRequest.SerializeToString,
            tenant__pb2.Tenants.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/Update',
            tenant__pb2.PatchTenantRequest.SerializeToString,
            tenant__pb2.Tenants.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/Get',
            tenant__pb2.GetTenantRequest.SerializeToString,
            tenant__pb2.Tenants.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/Delete',
            tenant__pb2.DeleteTenantRequest.SerializeToString,
            tenant__pb2.DeleteTenantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/List',
            tenant__pb2.ListTenantsRequest.SerializeToString,
            tenant__pb2.ListTenantsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTenantBusiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/AddTenantBusiness',
            tenant__pb2.AddTenantBusinessRequest.SerializeToString,
            tenant__pb2.TenantsBusiness.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTenantBusiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/ListTenantBusiness',
            tenant__pb2.ListTenantBusinessRequest.SerializeToString,
            tenant__pb2.ListTenantBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTenantBusiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/begonia.org.sdk.TenantsService/DeleteTenantBusiness',
            tenant__pb2.DeleteTenantBusinessRequest.SerializeToString,
            tenant__pb2.DeleteTenantBusinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
